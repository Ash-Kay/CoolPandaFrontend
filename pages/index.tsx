import { Box, Button } from "@mui/material";
import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import Navbar from "../src/components/Navbar";
import styles from "../styles/Home.module.css";
import { ethers } from "ethers";
import Web3Modal from "web3modal";
import { useCallback, useEffect, useState } from "react";
import useWeb3Store from "../src/state/web3.store";

const providerOptions = {
  /* See Provider Options Section */
};

const Home: NextPage = () => {
  const web3Store = useWeb3Store((state) => state);
  const [web3Modal, setWeb3Modal] = useState<Web3Modal | null>(null);
  const [web3ModalInstance, setWeb3ModalInstance] = useState<any | null>(null);
  const web3state1 = useWeb3Store((state) => state.data);

  const connectWallet = useCallback(async () => {
    if (typeof window !== "undefined" && web3Modal != null) {
      try {
        const instance = await web3Modal.connect();
        setWeb3ModalInstance(instance);

        const provider = new ethers.providers.Web3Provider(instance);
        const signer = provider.getSigner();
        const address = await signer.getAddress();
        const network = await provider.getNetwork();
        web3Store.updateState({
          isWallectConnected: true,
          provider,
          signer,
          address,
          network,
        });
      } catch (e) {
        console.log(e);
      }
    } else {
      web3Store.clear();
    }
  }, [web3Modal, web3Store]);

  const disconnectWallet = useCallback(async () => {
    if (web3Modal && web3ModalInstance) {
      await web3Modal.clearCachedProvider();
      if (
        web3ModalInstance?.disconnect &&
        typeof web3ModalInstance.disconnect === "function"
      ) {
        await web3ModalInstance.disconnect();
      }
      web3Store.clear();
    }
  }, [web3Modal, web3ModalInstance]);

  useEffect(() => {
    if (typeof window !== "undefined" && web3Modal == null) {
      setWeb3Modal(
        new Web3Modal({
          network: "mainnet",
          cacheProvider: true,
          providerOptions,
        })
      );
    }

    if (web3state1.isWallectConnected) {
      console.log("WAllet connected  already!!!");
    } else {
      console.log("WAllet nNOOTT  conn!!!");
    }

    console.log("useEffect1: web3Modal connected []");
  }, []);

  useEffect(() => {
    if (web3ModalInstance?.on) {
      const handleAccountsChanged = (accounts: string[]) => {
        console.log("accountsChanged", accounts);
        if (accounts.length >= 1) {
          web3Store.updateState({ address: accounts[0] });
        } else {
          disconnectWallet();
        }
      };

      // https://docs.ethers.io/v5/concepts/best-practices/#best-practices--network-changes
      const handleChainChanged = (_hexChainId: string) => {
        window.location.reload();
      };

      const handleDisconnect = (error: { code: number; message: string }) => {
        console.log("disconnect", error);
        disconnectWallet();
      };

      web3ModalInstance.on("accountsChanged", handleAccountsChanged);
      web3ModalInstance.on("chainChanged", handleChainChanged);
      web3ModalInstance.on("disconnect", handleDisconnect);

      // Subscription Cleanup
      return () => {
        if (web3ModalInstance.removeListener) {
          web3ModalInstance.removeListener(
            "accountsChanged",
            handleAccountsChanged
          );
          web3ModalInstance.removeListener("chainChanged", handleChainChanged);
          web3ModalInstance.removeListener("disconnect", handleDisconnect);
        }
      };
    }

    console.log(
      "useEffect2: web3ModalInstance callback [web3ModalInstance, disconnectWallet]"
    );
  }, [web3ModalInstance, disconnectWallet]);

  return (
    <div className={styles.container}>
      <Head>
        <title>Cool Panda</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Navbar onConnectWalletClicked={connectWallet} />

      <Box sx={{ marginTop: "60px" }} component="main">
        <Button variant="contained">Hi</Button>
      </Box>

      <footer>
        <p>Made by @AshKay</p>
      </footer>
    </div>
  );
};

export default Home;
